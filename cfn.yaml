AWSTemplateFormatVersion: 2010-09-09
Description: ophan backfill step function
Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: ophan
  App:
    Description: Application name
    Type: String
    Default: ophan-backfill
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: ophan-dist
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: params
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: ssm:GetParameter
              Resource: [!Sub 'arn:aws:ssm:eu-west-1:021353022223:parameter/Ophan/backfill/${Stage}/google-creds.json']

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: "*"

  InitJobLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-InitJob-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ophan/${Stage}/ophan-backfill/ophan-backfill.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: ophan backfill
      Handler: com.gu.ophan.backfill.InitBackfill::handleRequest
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  QueryJobStateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-QueryJobState-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ophan/${Stage}/ophan-backfill/ophan-backfill.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: ophan backfill
      Handler: com.gu.ophan.backfill.QueryJobState::handleRequest
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  OphanBackfillStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn:
    - InitJobLambda
    - QueryJobStateLambda
    Properties:
      StateMachineName: Ophan-Backfill-Extractor
      DefinitionString:
        !Sub
          - |
           {
             "Comment": "Ophan backfill: data extractor (extracts data from the data lake)",
             "StartAt": "InitJob",
             "States": {
               "InitJob": {
                 "Type": "Task",
                 "Resource": "${InitJobArn}",
                 "Next": "PauseForJobToRun"
                },
               "PauseForJobToRun": {
                 "Type": "Wait",
                 "Seconds": 60,
                 "Next": "CheckQueryJobStatus"
               },
               "CheckQueryJobStatus": {
                 "Type": "Task",
                 "Resource": "${QueryJobStateArn}",
                 "End": true
               }
             }
           }
          -
            InitJobArn: !GetAtt InitJobLambda.Arn
            QueryJobStateArn: !GetAtt QueryJobStateLambda.Arn
      RoleArn: !GetAtt StatesExecutionRole.Arn

  # DailyEvent:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: Event sent to process the previous day of data
  #     ScheduleExpression: cron(14 3 * * ? *)
  #     Targets:
  #       - Id: Lambda
  #         Arn: !GetAtt Lambda.Arn

  # DailyEventLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt Lambda.Arn
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt DailyEvent.Arn
